'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.composeTree = exports.extractText = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var extractText = exports.extractText = function extractText(children) {
  if (Array.isArray(children)) {
    return _react2.default.Children.map(children, function (child) {
      if (typeof child === 'string') {
        return child;
      }
      return extractText(child.props.children);
    }).join('');
  }
  return children;
};

var composeTree = exports.composeTree = function composeTree(children, charactersToType, characterIndex) {
  if (typeof children === 'string') {
    var startWord = charactersToType.indexOf(children);
    var lineLength = startWord + children.length;
    var endWord = lineLength > characterIndex ? characterIndex : lineLength;

    if (startWord < characterIndex) {
      return charactersToType.substring(startWord, endWord);
    }
    return null;
  }

  return _react2.default.Children.map(children, function (child) {
    if (typeof child === 'string') {
      return composeTree(child, charactersToType, characterIndex);
    } else if (_react2.default.isValidElement(child)) {
      return _react2.default.cloneElement(child, _extends({}, child.props), composeTree(child.props.children, charactersToType, characterIndex));
    }
    return null;
  });
};